generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// TODO relatedPoint

model point {
  id            Int        @id @default(autoincrement())
  active        Boolean    @default(true)
  userId        String
  latitude      Float
  longitude     Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  coverImageId  Int?       @unique
  coverImage    urlimage?  @relation("PointToCoverImage", fields: [coverImageId], references: [id])
  content       String?    @db.Text
  title         String
  yearDiscovery DateTime
  description   String?
  url           String?
  bc            Boolean
  dyear         Int?
  dmonth        Int?
  dday          Int?
  dyearAfter    Int?
  dmonthAfter   Int?
  ddayAfter     Int?
  typePointId   Int
  slug          String     @unique(map: "Point_slug_key") @db.VarChar(255)
  typepoint     typepoint  @relation(fields: [typePointId], references: [id], map: "Point_typePointId_fkey")
  user          user       @relation(fields: [userId], references: [id], map: "Point_userId_fkey")
  urlimage      urlimage[] @relation("PointToUrlImage")

  @@index([typePointId], map: "Point_typePointId_fkey")
  @@index([userId], map: "Point_userId_fkey")
}

model typepoint {
  id          Int       @id @default(autoincrement())
  libelle     String
  description String?
  icon        String?   @default("Other.svg")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  point       point[]
}

model urlimage {
  id           Int       @id @default(autoincrement())
  uuid         String?   @default(cuid())
  pointId      Int?
  url          String    @db.Text
  filename     String
  mimetype     String
  description  String?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  point        point?    @relation("PointToUrlImage", fields: [pointId], references: [id])
  coverPoint   point?    @relation("PointToCoverImage")
  uploadedById String?
  uploadedBy   user?     @relation(fields: [uploadedById], references: [id], map: "UrlImage_uploadedById_fkey")

  @@index([pointId], map: "UrlImage_pointId_fkey")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String     @id @default(cuid())
  email         String     @unique(map: "User_email_key")
  name          String     @unique(map: "User_name_key")
  password      String?
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  admin         Boolean    @default(false)
  active        Boolean    @default(true)
  emailVerified DateTime?
  image         String?
  roles         String     @default("user")
  account       account[]
  point         point[]
  session       session[]
  uploadedImg   urlimage[]
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
