generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model point {
  id            Int        @id @default(autoincrement())
  active        Boolean    @default(true)
  userId        String
  latitude      Float
  longitude     Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  deletedAt     DateTime?
  title         String
  yearDiscovery Int
  description   String?
  url           String?
  bc            Boolean
  year          Int?
  typePointId   Int
  typepoint     typepoint  @relation(fields: [typePointId], references: [id], map: "Point_typePointId_fkey")
  user          User       @relation(fields: [userId], references: [id], map: "Point_userId_fkey")
  urlimage      urlimage[]

  @@index([typePointId], map: "Point_typePointId_fkey")
  @@index([userId], map: "Point_userId_fkey")
}

model typepoint {
  id          Int       @id @default(autoincrement())
  libelle     String
  description String?
  icon        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  deletedAt   DateTime?
  point       point[]
}

model urlimage {
  id        Int       @id @default(autoincrement())
  pointId   Int
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  point     point     @relation(fields: [pointId], references: [id], map: "UrlImage_pointId_fkey")

  @@index([pointId], map: "UrlImage_pointId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  admin         Boolean   @default(false)
  active        Boolean   @default(true)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  point         point[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
